using System.Collections.Generic;
using MetaShare.Common.Core.Entities;
using MetaShare.Common.Core.Services;
using MetaShare.Common.Core.Services.Version;
using EdpsProjectManagement.Entities.BusinessEntities;
using EdpsProjectManagement.Daos.Interfaces.BusinessEntities;
using EdpsProjectManagement.Services.Interfaces.BusinessEntities;

/*add customized code between this region*/
/*add customized code between this region*/

namespace EdpsProjectManagement.Services.BusinessEntities
{
	public class TaskService: ObjectVersionService<EdpsProjectManagement.Entities.BusinessEntities.Task>,ITaskService
	{
		public TaskService() : base(typeof(ITaskDao))
		{
		}
		
		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectAllWithReferenceData(List<EdpsProjectManagement.Entities.BusinessEntities.Task> items)        {            if (items != null && items.Count > 0)            {                 return this.SelectBy(items, this.CreateReferenceInfoAggregation());            }                return items;        }
		
		private ServiceAggregationInfo CreateReferenceInfoAggregation()
		{
		    ServiceAggregationInfo aggregation = ServiceAggregationInfo.CreateRoot(typeof(EdpsProjectManagement.Entities.BusinessEntities.Task),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.ITaskDao));
		
		    aggregation.AddReferenceChild("Iteration",typeof(EdpsProjectManagement.Entities.BusinessEntities.Iteration),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.IIterationDao));
		    aggregation.AddReferenceChild("Project",typeof(EdpsProjectManagement.Entities.BusinessEntities.Project),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.IProjectDao));
		    aggregation.AddReferenceChild("Repository",typeof(EdpsProjectManagement.Entities.BusinessEntities.Repository),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.IRepositoryDao));
		    return aggregation;
		}
		
		protected override ServiceAggregationInfo CreateAllInfoAggregation()
		{
		    ServiceAggregationInfo aggregation = ServiceAggregationInfo.CreateRoot(typeof(EdpsProjectManagement.Entities.BusinessEntities.Task),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.ITaskDao));
		
		    ServiceAggregationInfo IterationServiceAggregation = aggregation.AddReferenceChild("Iteration",typeof(EdpsProjectManagement.Entities.BusinessEntities.Iteration),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.IIterationDao));
		    ServiceAggregationInfo ProjectServiceAggregation = aggregation.AddReferenceChild("Project",typeof(EdpsProjectManagement.Entities.BusinessEntities.Project),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.IProjectDao));
		    ServiceAggregationInfo RepositoryServiceAggregation = aggregation.AddReferenceChild("Repository",typeof(EdpsProjectManagement.Entities.BusinessEntities.Repository),typeof(EdpsProjectManagement.Daos.Interfaces.BusinessEntities.IRepositoryDao));
		    return aggregation;
		}
		
		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectTaskByIterations(int[] iterationIds, bool isAggregatedChildren = false)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectByColumnIds("IterationId",iterationIds,isAggregatedChildren);            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectTaskByIterations(Pager pager, int[] iterationIds, bool isAggregatedChildren = false)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectByColumnIds(pager,"IterationId",iterationIds,isAggregatedChildren);            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByIteration(int pageIndex,int pageSize,int iterationId)        {            Pager pager = new Pager { PageIndex = pageIndex, PageSize = pageSize };            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(pager,new EdpsProjectManagement.Entities.BusinessEntities.Task { Iteration = new EdpsProjectManagement.Entities.BusinessEntities.Iteration{Id = iterationId} },new List<string> { "IterationId" });            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByIteration(int iterationId)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(new EdpsProjectManagement.Entities.BusinessEntities.Task { Iteration = new EdpsProjectManagement.Entities.BusinessEntities.Iteration{Id = iterationId} },new List<string> { "IterationId" });            return items;        }
		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectTaskByProjects(int[] projectIds, bool isAggregatedChildren = false)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectByColumnIds("ProjectId",projectIds,isAggregatedChildren);            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectTaskByProjects(Pager pager, int[] projectIds, bool isAggregatedChildren = false)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectByColumnIds(pager,"ProjectId",projectIds,isAggregatedChildren);            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByProject(int pageIndex,int pageSize,int projectId)        {            Pager pager = new Pager { PageIndex = pageIndex, PageSize = pageSize };            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(pager,new EdpsProjectManagement.Entities.BusinessEntities.Task { Project = new EdpsProjectManagement.Entities.BusinessEntities.Project{Id = projectId} },new List<string> { "ProjectId" });            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByProject(int projectId)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(new EdpsProjectManagement.Entities.BusinessEntities.Task { Project = new EdpsProjectManagement.Entities.BusinessEntities.Project{Id = projectId} },new List<string> { "ProjectId" });            return items;        }
		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectTaskByRepositorys(int[] repositoryIds, bool isAggregatedChildren = false)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectByColumnIds("RepositoryId",repositoryIds,isAggregatedChildren);            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectTaskByRepositorys(Pager pager, int[] repositoryIds, bool isAggregatedChildren = false)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectByColumnIds(pager,"RepositoryId",repositoryIds,isAggregatedChildren);            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByRepository(int pageIndex,int pageSize,int repositoryId)        {            Pager pager = new Pager { PageIndex = pageIndex, PageSize = pageSize };            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(pager,new EdpsProjectManagement.Entities.BusinessEntities.Task { Repository = new EdpsProjectManagement.Entities.BusinessEntities.Repository{Id = repositoryId} },new List<string> { "RepositoryId" });            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByRepository(int repositoryId)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(new EdpsProjectManagement.Entities.BusinessEntities.Task { Repository = new EdpsProjectManagement.Entities.BusinessEntities.Repository{Id = repositoryId} },new List<string> { "RepositoryId" });            return items;        }
		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByIterationProject(int pageIndex,int pageSize,int iterationId,int projectId)        {            Pager pager = new Pager { PageIndex = pageIndex, PageSize = pageSize };            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(pager,new EdpsProjectManagement.Entities.BusinessEntities.Task { Iteration = new EdpsProjectManagement.Entities.BusinessEntities.Iteration{ Id = iterationId},Project = new EdpsProjectManagement.Entities.BusinessEntities.Project{ Id = projectId}},new List<string> { "IterationId","ProjectId" });            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByIterationProject(int iterationId,int projectId)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(new EdpsProjectManagement.Entities.BusinessEntities.Task { Iteration = new EdpsProjectManagement.Entities.BusinessEntities.Iteration{ Id = iterationId},Project = new EdpsProjectManagement.Entities.BusinessEntities.Project{ Id = projectId}},new List<string> { "IterationId","ProjectId" });            return items;        }		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByIterationRepository(int pageIndex,int pageSize,int iterationId,int repositoryId)        {            Pager pager = new Pager { PageIndex = pageIndex, PageSize = pageSize };            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(pager,new EdpsProjectManagement.Entities.BusinessEntities.Task { Iteration = new EdpsProjectManagement.Entities.BusinessEntities.Iteration{ Id = iterationId},Repository = new EdpsProjectManagement.Entities.BusinessEntities.Repository{ Id = repositoryId}},new List<string> { "IterationId","RepositoryId" });            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByIterationRepository(int iterationId,int repositoryId)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(new EdpsProjectManagement.Entities.BusinessEntities.Task { Iteration = new EdpsProjectManagement.Entities.BusinessEntities.Iteration{ Id = iterationId},Repository = new EdpsProjectManagement.Entities.BusinessEntities.Repository{ Id = repositoryId}},new List<string> { "IterationId","RepositoryId" });            return items;        }		public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByProjectRepository(int pageIndex,int pageSize,int projectId,int repositoryId)        {            Pager pager = new Pager { PageIndex = pageIndex, PageSize = pageSize };            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(pager,new EdpsProjectManagement.Entities.BusinessEntities.Task { Project = new EdpsProjectManagement.Entities.BusinessEntities.Project{ Id = projectId},Repository = new EdpsProjectManagement.Entities.BusinessEntities.Repository{ Id = repositoryId}},new List<string> { "ProjectId","RepositoryId" });            return items;        }        public List<EdpsProjectManagement.Entities.BusinessEntities.Task> SelectByProjectRepository(int projectId,int repositoryId)        {            List<EdpsProjectManagement.Entities.BusinessEntities.Task> items = this.SelectBy(new EdpsProjectManagement.Entities.BusinessEntities.Task { Project = new EdpsProjectManagement.Entities.BusinessEntities.Project{ Id = projectId},Repository = new EdpsProjectManagement.Entities.BusinessEntities.Repository{ Id = repositoryId}},new List<string> { "ProjectId","RepositoryId" });            return items;        }		
		/*add customized code between this region*/
		/*add customized code between this region*/
	}
}
