using System;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

using EdpsProjectManagement.WebApi.Models;
/*add customized code between this region*/
/*add customized code between this region*/


namespace EdpsProjectManagement.WebApi.Controllers.BusinessEntities
{
	[Route("BusinessEntities/TaskApi")]
	public class TaskApiController: ObjectVersionApiController<EdpsProjectManagement.Entities.BusinessEntities.Task,EdpsProjectManagement.Services.Interfaces.BusinessEntities.ITaskService>
	{
		        [Route("SelectTaskByIterations")]        [HttpPost]        public RequestResult SelectTaskByIterations(int[] iterationIds, bool isAggregatedChildren)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectTaskByIterations(iterationIds,isAggregatedChildren);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectByIteration")]        [HttpGet]        public RequestResult SelectByIteration(int iterationId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByIteration(iterationId);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectWithPageByIteration")]        [HttpGet]        public RequestResult SelectWithPageByIteration(int pageIndex,int pageSize,int iterationId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByIteration(pageIndex,pageSize,iterationId);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }
		        [Route("SelectTaskByProjects")]        [HttpPost]        public RequestResult SelectTaskByProjects(int[] projectIds, bool isAggregatedChildren)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectTaskByProjects(projectIds,isAggregatedChildren);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectByProject")]        [HttpGet]        public RequestResult SelectByProject(int projectId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByProject(projectId);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectWithPageByProject")]        [HttpGet]        public RequestResult SelectWithPageByProject(int pageIndex,int pageSize,int projectId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByProject(pageIndex,pageSize,projectId);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }
		        [Route("SelectTaskByRepositorys")]        [HttpPost]        public RequestResult SelectTaskByRepositorys(int[] repositoryIds, bool isAggregatedChildren)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectTaskByRepositorys(repositoryIds,isAggregatedChildren);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectByRepository")]        [HttpGet]        public RequestResult SelectByRepository(int repositoryId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByRepository(repositoryId);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectWithPageByRepository")]        [HttpGet]        public RequestResult SelectWithPageByRepository(int pageIndex,int pageSize,int repositoryId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByRepository(pageIndex,pageSize,repositoryId);
		                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }
		[Route("SelectByIterationProject")]        [HttpGet]        public RequestResult SelectByIterationProject(int iterationId,int projectId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByIterationProject(iterationId,projectId);                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectWithPageByIterationProject")]        [HttpGet]        public RequestResult SelectWithPageByIterationProject(int pageIndex,int pageSize,int iterationId,int projectId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByIterationProject(pageIndex,pageSize,iterationId,projectId);                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }		[Route("SelectByIterationRepository")]        [HttpGet]        public RequestResult SelectByIterationRepository(int iterationId,int repositoryId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByIterationRepository(iterationId,repositoryId);                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectWithPageByIterationRepository")]        [HttpGet]        public RequestResult SelectWithPageByIterationRepository(int pageIndex,int pageSize,int iterationId,int repositoryId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByIterationRepository(pageIndex,pageSize,iterationId,repositoryId);                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }		[Route("SelectByProjectRepository")]        [HttpGet]        public RequestResult SelectByProjectRepository(int projectId,int repositoryId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByProjectRepository(projectId,repositoryId);                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }        [Route("SelectWithPageByProjectRepository")]        [HttpGet]        public RequestResult SelectWithPageByProjectRepository(int pageIndex,int pageSize,int projectId,int repositoryId)        {            try            {                List<EdpsProjectManagement.Entities.BusinessEntities.Task> entities = this.Service.SelectByProjectRepository(pageIndex,pageSize,projectId,repositoryId);                return new RequestResult { IsSucceed = true, Message = SelectSuccessful, Data = entities };            }            catch (Exception exc)            {                return new RequestResult { IsSucceed = false, Message = SelectFailed + exc.Message, Data = null };            }        }		
		/*add customized code between this region*/
		/*add customized code between this region*/
		
	}
}
